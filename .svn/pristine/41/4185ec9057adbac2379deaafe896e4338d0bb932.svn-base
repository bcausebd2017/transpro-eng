(function () {
    'use strict';
    angular.module("app").controller("translatorController", function ($scope, $state, $rootScope, $uibModal, transproService, translatorService, APP_SETTINGS, appStorageFactory, STORAGE_TYPE,alertMsg) {
        var vm = this;
        $scope.isTranslatorLoaded = false;
        vm.RegEmail2 = "";
        vm.Repass = "";
        vm.model = {};
        //vm.Sex = "female";
        //vm.model = {};
        //vm.model.Sex = false;
        $scope.selectField = "";

        if ($state.params.modelData) {
            vm.model = $state.params.modelData;
            vm.IsModifyState = true;
        } else {
            vm.IsModifyState = false;
        }

        Activate();
        function Activate() {
            $scope.selectLanguage = appStorageFactory.GetStorageObject(STORAGE_TYPE.SetTargetLang);
            getTranslationFields();
            transproService.getCountries().then(function (response) {
                vm.country = response;
            }).catch(function (error) {
            });

            transproService.getEducatinalDegree().then(function (response) {
                vm.educations = response;
            }).catch(function (error) {
            });

            transproService.getBankAccountType().then(function (response) {
                vm.bankaccounttype = response;
            }).catch(function (error) {
            });
            
            transproService.getLanguages().then(function (response) {
                vm.languages = response;
                $scope.languageList = response;
                $scope.srcLanguage = _.find(response, function (f) { return f.Code == 'eng' }).ID;
                if (!$scope.selectLanguage)
                    $scope.destLanguage = _.find(response, function (f) { return f.Code == 'jpn' }).ID;
                else
                    $scope.destLanguage = $scope.selectLanguage;

                translatorService.searchTranslator($scope.srcLanguage, $scope.destLanguage, $scope.selectField).then(function (response) {
                    $scope.translators = response;
                    //errorMsg.show('success', "Success happened here");
                }).catch(function (error) {
                    alertMsg.show('error', error);
                });
            }).catch(function (error) {
            });

            transproService.getLanguageslvl().then(function (response) {
                vm.languagelvl = response.LanguageLevelList;
            }).catch(function (error) {
                console.log("My error")
            });

            transproService.getCurrentState().then(function (response) {
                vm.currentstate = response;
                _.forEach(response, function (f) { f.IsSelected = false; });
                //for (c = 0; c < response.length; c++) {
                //    Object.defineProperties(vm.currentstate[c], "IsSelected", { value: false, writable: true, enumerable: true, configurable: true })
                //    vm.currentstate[i].IsSelected = false;
                //}
            }).catch(function (error) {
            });

            transproService.gettranslatorsoftwareskills().then(function (response) {
                vm.software = response;
                _.forEach(response, function (f) { f.IsSelected = false; });
            }).catch(function (error) {
            });

            transproService.getTranslationFileds().then(function (response) {
                vm.profession = response;
                //var i;
                //for (i = 0; i < response.length; i += 1) {
                //    Object.defineProperty(vm.profession[i], "IsSelected", { value: false, writable: true, enumerable: true, configurable: true });
                //    vm.profession[i].IsSelected = false;
                //}
                _.forEach(response, function (f) { f.IsSelected = false; });
                $scope.isTranslatorLoaded = true;
            }).catch(function (error) {
            });

        }

        $scope.$on('targetLanguageChanged', function (event, data) {
            $scope.destLanguage = data;
            translatorService.searchTranslator($scope.srcLanguage, $scope.destLanguage, $scope.selectField).then(function (response) {
                $scope.translators = response;
                //errorMsg.show('success', "Success happened here");
            }).catch(function (error) {
                // alertMsg.show('error', error);
            });
        });

        function getTranslationFields() {
            transproService.getTranslationFileds().then(function (response) {
                $scope.translationField = response;
            }).catch(function (error) {
            });
        }
        $scope.SaveTranslator = function () {
            $scope.isTriedSave = true;
            if (!isValidInput())
                return;
            //if (vm.Sex == 'male') {
            //    vm.model.Sex = true;
            //} else {
            //    vm.model.Sex = false;
            //}

            vm.model.ApplicationID = APP_SETTINGS.ApplicationId;
            vm.model.CurrentCulture = APP_SETTINGS.CultureCode;
            vm.model.StaffTypeID = 1;
            translatorService.registerTranslator(vm.model).then(onSuccessSave).catch(function (error) {

            });
        }
        $scope.SearchTranslators = function () {
            translatorService.searchTranslator($scope.srcLanguage, $scope.destLanguage, $scope.selectField).then(function (response) {
                $scope.translators = response;
                //errorMsg.show('success', "Success happened here");
            }).catch(function (error) {
                alertMsg.show('error', error);
            });
        }
        
        var onSuccessSave = function (response) {

            var staff = response;
            var CurrentStateList = new Array(vm.currentstate.length);
            var i;
            for (i = 0; i < CurrentStateList.length; i++) {
                var obj = {};
                obj.ID = "";
                obj.StaffID = staff.ID;
                obj.CurrentStateID = vm.currentstate[i].ID;
                obj.IsSelected = vm.currentstate[i].IsSelected;
                CurrentStateList[i] = obj;
            }

            translatorService.storeCurrentState(CurrentStateList).then(function (response) {
               // toastr.success('Current states are stored successfully');
            }).catch(function (error) {
                //toastr.error('Current states could not be saved due to an errror!');
            });


            var ProfessionList = new Array(vm.profession.length);
            var p;
            for (p = 0; p < ProfessionList.length; p++) {
                var obj = {};
                obj.ID = "";
                obj.StaffID = staff.ID;
                obj.ProfessionalID = vm.profession[p].ID;
                obj.IsSelected = vm.profession[p].IsSelected;
                ProfessionList[p] = obj;
            }
            translatorService.storeProfession(ProfessionList).then(function (response) {
                alertMsg.show('success', 'Your have been registered successfully.');
              //  toastr.success('Profession are stored successfully');
            }).catch(function (error) {
                toastr.error('Profession could not save!');
            });

        }
        function isValidInput() {

            if (!vm.IsModifyState) {
            if (!vm.model.StaffEmailID || !vm.RegEmail2 || vm.model.StaffEmailID == "") {
                return false;
            }
            if (!vm.model.StaffEmailID !== !vm.RegEmail2) {
                return false;
            }
            if (!vm.model.Password || !vm.Repass || vm.model.Password == "") {
                return false;
            }
            if (!vm.model.Password !== !vm.Repass) {
                return false;
               }
             }
            if (!vm.model.LastName || vm.model.LastName == "") {
                return false;
            }
            if (!vm.model.FirstName || vm.model.FirstName == "") {
                return false;
            }
            if (!vm.model.PostalCode || vm.model.PostalCode == "") {
                return false;
            }
            if (!vm.model.CityOfOverseas || vm.model.CityOfOverseas == "") {
                return false;
            }
            if (!vm.model.Street || vm.model.Street == "") {
                return false;
            }
            if (!vm.model.ApartmentName || vm.model.ApartmentName == "") {
                return false;
            }
            if (!vm.model.MainCareer || vm.model.MainCareer == "") {
                return false;
            }
            if (!vm.model.SelfPR || vm.model.SelfPR == "") {
                return false;
            }
            if (!vm.model.TelephoneNo || vm.model.TelephoneNo == "") {
                return false;
            }
            if (!vm.model.MobileNo || vm.model.MobileNo == "") {
                return false;
            }
            if (!vm.model.HomeCountryPhone || vm.model.HomeCountryPhone == "") {
                return false;
            }
            if (!vm.model.BankAccountName || vm.model.BankAccountName == "") {
                return false;
            }
            if (!vm.model.BankAccountNumber || vm.model.BankAccountNumber == "") {
                return false;
            }
            if (!vm.model.BankBranchName || vm.model.BankBranchName == "") {
                return false;
            }
            if (!vm.model.BankName || vm.model.BankName == "") {
                return false;
            }
           
            return true;
        }

        $scope.checkExistingTranslator = function () {
            if (!vm.IsModifyState) {
                if (!vm.model.StaffEmailID || vm.model.StaffEmailID == "") {
                    // toastr.error("Please enter valid Email ID");
                    vm.IsOperationCompleted = false;
                    alertMsg.show('alert', 'Please enter valid Email ID.');
                    return false;
                }
            }

            translatorService.checkExistingTranslator(vm.model.StaffEmailID, APP_SETTINGS.CultureCode).then(function (response) {
                
                vm.IsOperationCompleted = true;
                vm.translatorExisted = true;
                alertMsg.show('alert', "Email ID already exist,please use another one.");
            }).catch(function (error) {
                vm.IsOperationCompleted = true;
                vm.translatorExisted = false;
            });
        }
    });

})();